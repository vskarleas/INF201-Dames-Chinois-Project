let conf_essai_chacal = ([(-6, 3, 3),Vert; (-4, 3, 1),Vert; (0, 1, -1),Vert; (-5, 3, 2),Vert],[Vert], 3)
let coup_essai_chacal : coup = Sm([(-6, 3, 3); (-2, 3, -1); (2, -1, -1)])

let coup_essai_1 : coup = Du((-6,3,3),(-5,3,2))
let conf_essai :configuration = ([(1, -1, 0),Vert; (0, 1, -1),Vert; (-1, 0, 1),Rouge; (-1, -1, 2), Vert; (2, -2, 2),Vert],[Rouge;Vert],3);;
let liste_coup_test : coup list = 
[Sm([(-6, 3, 3); (-2, 1, 1)]);
Sm([(-5, 3, 2); (-3, 3, 0)]);
Sm([(-5, 2, 3); (-3, 2, 1)]);
Sm([(-4, 2, 2); (0, 0, 0)]);
Sm([(-5, 2, 3); (-3, 2, 1)]);
Sm([(-5, 3, 2); (-3, 3, 0)]);
Sm([(-2, 1, 1); (2, -1, -1)]);
Sm([(-4, 2, 2); (-2, 2, 0)]);
Sm([(-4, 3, 1); (-2, 1, 1)]);
Sm([(-5, 3, 2); (-3, 3, 0)]);
Sm([(-4, 3, 1); (-2, 1, 1)]);
Sm([(-4, 2, 2); (-2, 2, 0)]);
Sm([(0, 0, 0); (4, -2, -2)]);
Sm([(-3, 2, 1); (-1, 0, 1)]);
Sm([(-3, 2, 1); (-1, 0, 1)]);
Sm([(-5, 2, 3); (-3, 0, 3)]);
Sm([(-1, 0, 1); (3, -2, -1)]);
Sm([(-6, 3, 3); (2, -1, -1)]);
Sm([(2, -1, -1); (6, -3, -3)]);
Sm([(-4, 1, 3); (0, 1, -1)]);
Sm([(-1, 0, 1); (3, -2, -1)]);
Sm([(-3, 0, 3); (1, 0, -1)]);
Sm([(-2, 2, 0); (2, 0, -2)]);
Sm([(-2, 1, 1); (6, -3, -3)]);
Sm([(-4, 3, 1); (0, 1, -1)]);
Sm([(-3, 3, 0); (-1, -1, 2)]);
Sm([(2, -1, -1); (4, -3, -1)]);
Sm([(0, 1, -1); (4, -1, -3)]);
Sm([(-2, 1, 1); (2, 1, -3)]);
Sm([(-2, 2, 0); (0, 0, 0)]);
Sm([(1, 0, -1); (3, -2, -1)]);
Sm([(-6, 3, 3); (6, -3, -3)]);
Sm([(-4, 1, 3); (4, -1, -3)]);
Sm([(3, -2, -1); (5, -2, -3)]);
Sm([(2, 1, -3); (4, -1, -3)]);
Sm([(0, 0, 0); (2, -2, 0)]);
Sm([(-4, 1, 3); (0, -1, 1)]);
Du((-1, -1, 2), (0, -1, 1));
Sm([(2, -2, 0); (4, -2, -2)]);
Sm([(-3, 3, 0); (-1, 1, 0)]);
Sm([(0, 1, -1); (2, -1, -1)]);
Sm([(-3, 3, 0); (1, -1, 0)]);
Sm([(-1, 1, 0); (3, -1, -2)]);
Du((0, -1, 1), (1, -1, 0));
Sm([(1, -1, 0); (5, -3, -2)]);
Du((0, -1, 1), (1, -1, 0));
Sm([(1, -1, 0); (3, -1, -2)]);
Sm([(3, -2, -1); (5, -2, -3)]);]
;;

let liste_coup_test_2 : coup list = 

  [Du((-4, 3, 1), (-3, 2, 1));
  Du((-4, 3, 1), (-3, 2, 1));
  Sm([(-5, 3, 2); (-3, 1, 2)]);
  Sm([(-6, 3, 3); (-4, 3, 1); (-2, 1, 1)]);
  Sm([(-5, 3, 2); (-3, 1, 2)]);
  Du((-4, 2, 2), (-3, 2, 1));
  Sm([(-4, 1, 3); (0, 1, -1)]);
  Sm([(-4, 1, 3); (-2, 1, 1)]);
  Sm([(-5, 2, 3); (-1, 2, -1)]);
  Sm([(-5, 3, 2); (-3, 1, 2); (-1, 1, 0); (1, 1, -2)]);
  Sm([(-4, 2, 2); (-2, 0, 2); (0, -2, 2); (2, -4, 2); (2, -2, 0)]);
  Sm([(-6, 3, 3); (-2, 3, -1); (0, 1, -1)]);
  Sm([(0, 1, -1); (4, -3, -1)]);
  Sm([(-3, 2, 1); (-3, 0, 3); (1, 0, -1); (1, 2, -3); (3, 0, -3)]);
  Sm([(-3, 1, 2); (-1, 1, 0); (-1, 3, -2); (3, -1, -2)]);
  Sm([(-4, 2, 2); (-2, 2, 0); (2, 2, -4); (2, 0, -2)]);
  Sm([(-2, 1, 1); (0, -1, 1); (2, -3, 1); (2, -1, -1)]);
  Sm([(-1, 2, -1); (1, 0, -1)]);
  Sm([(1, 1, -2); (-1, 3, -2); (-1, 1, 0); (3, -3, 0); (5, -3, -2)]);
  Sm([(-6, 3, 3); (-4, 1, 3); (-2, 1, 1); (0, -1, 1); (4, -1, -3)]);
  Sm([(-4, 3, 1); (-2, 1, 1); (-2, -1, 3); (0, -1, 1); (0, 3, -3); (2, 1, -3)]);
  Du((-5, 2, 3), (-4, 2, 2));
  Sm([(-5, 2, 3); (-1, 2, -1)]);
  Sm([(-3, 2, 1); (-1, 2, -1); (3, 2, -5); (3, -4, 1); (1, -4, 3); (-1, -2, 3); (-1, 0, 1); (3, 0, -3); (3, -2, -1)]);
  Sm([(-4, 2, 2); (-2, 2, 0); (-2, 0, 2); (0, -2, 2); (2, -4, 2); (2, -2, 0)]);
  Sm([(-3, 1, 2); (-3, 3, 0); (1, -1, 0); (3, -3, 0)]);
  Sm([(0, 1, -1); (0, 3, -3); (4, -1, -3)]);
  Sm([(-2, 1, 1); (2, -3, 1); (2, -1, -1)]);
  Sm([(-1, 2, -1); (-1, 0, 1); (-1, -2, 3); (1, -2, 1); (3, -2, -1); (1, 0, -1); (3, -2, -1)]);
  Sm([(2, 1, -3); (6, -3, -3)]);
  Du((-3, 2, 1), (-2, 1, 1));
  Sm([(2, -2, 0); (4, -2, -2)]);
  Du((-4, 1, 3), (-3, 1, 2));
  Sm([(-2, 1, 1); (2, -3, 1)]);
  Sm([(3, 0, -3); (5, -2, -3)]);
  Sm([(-3, 1, 2); (1, -3, 2)]);
  Du((2, -1, -1), (3, -1, -2));
  Sm([(4, -1, -3); (6, -3, -3)]);
  Du((1, -3, 2), (1, -2, 1));
  Sm([(2, -3, 1); (2, -1, -1); (4, -1, -3)]);
  Sm([(2, -1, -1); (4, -3, -1); (4, -1, -3)]);
  Sm([(1, -2, 1); (5, -2, -3)]);
  Du((2, -2, 0), (2, -1, -1));
  Du((3, -2, -1), (4, -3, -1));
  Du((1, 0, -1), (2, 0, -2));
  Sm([(2, -1, -1); (2, 1, -3); (6, -3, -3)]);
  Sm([(3, -3, 0); (5, -3, -2)])]
;;

let conf_essai : configuration =
  ([(-4, 1, 3),Vert; (-4, 2, 2), Vert; (-4, 3, 1),Vert; (-5, 3, 2), Vert; (-6, 3, 3),Vert; (-5, 2, 3),Vert; (3, -6, 3),Jaune; (3, -5, 2),Jaune; (3, -4, 1),Jaune; (2, -4, 2),Jaune; (1, -4, 3),Jaune; (2, -5, 3),Jaune; (3, 1, -4),Rouge; (2, 2, -4),Rouge; (1, 3, -4),Rouge; (3, 2, -5),Rouge; (2, 3, -5),Rouge; (3, 3, -6),Rouge], [Vert; Jaune; Rouge], 3);;